<?php
/**
 * ScoreDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flat\APIClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flat API
 *
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML or MIDI files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and interoduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html)
 *
 * OpenAPI spec version: 2.4.0
 * Contact: developers@flat.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flat\APIClient\Model;

use \ArrayAccess;

/**
 * ScoreDetails Class Doc Comment
 *
 * @category    Class
 * @description The score and all its details
 * @package     Flat\APIClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ScoreDetails implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ScoreDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'sharingKey' => 'string',
        'title' => 'string',
        'privacy' => '\Flat\APIClient\Model\ScorePrivacy',
        'user' => '\Flat\APIClient\Model\UserPublicSummary',
        'htmlUrl' => 'string',
        'subtitle' => 'string',
        'lyricist' => 'string',
        'composer' => 'string',
        'description' => 'string',
        'tags' => 'string[]',
        'creationType' => '\Flat\APIClient\Model\ScoreCreationType',
        'license' => '\Flat\APIClient\Model\ScoreLicense',
        'licenseText' => 'string',
        'durationTime' => 'int',
        'numberMeasures' => 'int',
        'mainTempoQpm' => 'int',
        'rights' => '\Flat\APIClient\Model\ScoreRights',
        'collaborators' => '\Flat\APIClient\Model\ScoreCollaborator[]',
        'creationDate' => '\DateTime',
        'modificationDate' => '\DateTime',
        'publicationDate' => '\DateTime',
        'organization' => 'string',
        'parentScore' => 'string',
        'instruments' => 'string[]',
        'googleDriveFileId' => 'string',
        'likes' => '\Flat\APIClient\Model\ScoreLikesCounts',
        'comments' => '\Flat\APIClient\Model\ScoreCommentsCounts',
        'views' => '\Flat\APIClient\Model\ScoreViewsCounts'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'sharingKey' => null,
        'title' => null,
        'privacy' => null,
        'user' => null,
        'htmlUrl' => 'url',
        'subtitle' => null,
        'lyricist' => null,
        'composer' => null,
        'description' => null,
        'tags' => null,
        'creationType' => null,
        'license' => null,
        'licenseText' => null,
        'durationTime' => null,
        'numberMeasures' => null,
        'mainTempoQpm' => null,
        'rights' => null,
        'collaborators' => null,
        'creationDate' => 'date-time',
        'modificationDate' => 'date-time',
        'publicationDate' => 'date-time',
        'organization' => null,
        'parentScore' => null,
        'instruments' => null,
        'googleDriveFileId' => null,
        'likes' => null,
        'comments' => null,
        'views' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'sharingKey' => 'sharingKey',
        'title' => 'title',
        'privacy' => 'privacy',
        'user' => 'user',
        'htmlUrl' => 'htmlUrl',
        'subtitle' => 'subtitle',
        'lyricist' => 'lyricist',
        'composer' => 'composer',
        'description' => 'description',
        'tags' => 'tags',
        'creationType' => 'creationType',
        'license' => 'license',
        'licenseText' => 'licenseText',
        'durationTime' => 'durationTime',
        'numberMeasures' => 'numberMeasures',
        'mainTempoQpm' => 'mainTempoQpm',
        'rights' => 'rights',
        'collaborators' => 'collaborators',
        'creationDate' => 'creationDate',
        'modificationDate' => 'modificationDate',
        'publicationDate' => 'publicationDate',
        'organization' => 'organization',
        'parentScore' => 'parentScore',
        'instruments' => 'instruments',
        'googleDriveFileId' => 'googleDriveFileId',
        'likes' => 'likes',
        'comments' => 'comments',
        'views' => 'views'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'sharingKey' => 'setSharingKey',
        'title' => 'setTitle',
        'privacy' => 'setPrivacy',
        'user' => 'setUser',
        'htmlUrl' => 'setHtmlUrl',
        'subtitle' => 'setSubtitle',
        'lyricist' => 'setLyricist',
        'composer' => 'setComposer',
        'description' => 'setDescription',
        'tags' => 'setTags',
        'creationType' => 'setCreationType',
        'license' => 'setLicense',
        'licenseText' => 'setLicenseText',
        'durationTime' => 'setDurationTime',
        'numberMeasures' => 'setNumberMeasures',
        'mainTempoQpm' => 'setMainTempoQpm',
        'rights' => 'setRights',
        'collaborators' => 'setCollaborators',
        'creationDate' => 'setCreationDate',
        'modificationDate' => 'setModificationDate',
        'publicationDate' => 'setPublicationDate',
        'organization' => 'setOrganization',
        'parentScore' => 'setParentScore',
        'instruments' => 'setInstruments',
        'googleDriveFileId' => 'setGoogleDriveFileId',
        'likes' => 'setLikes',
        'comments' => 'setComments',
        'views' => 'setViews'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'sharingKey' => 'getSharingKey',
        'title' => 'getTitle',
        'privacy' => 'getPrivacy',
        'user' => 'getUser',
        'htmlUrl' => 'getHtmlUrl',
        'subtitle' => 'getSubtitle',
        'lyricist' => 'getLyricist',
        'composer' => 'getComposer',
        'description' => 'getDescription',
        'tags' => 'getTags',
        'creationType' => 'getCreationType',
        'license' => 'getLicense',
        'licenseText' => 'getLicenseText',
        'durationTime' => 'getDurationTime',
        'numberMeasures' => 'getNumberMeasures',
        'mainTempoQpm' => 'getMainTempoQpm',
        'rights' => 'getRights',
        'collaborators' => 'getCollaborators',
        'creationDate' => 'getCreationDate',
        'modificationDate' => 'getModificationDate',
        'publicationDate' => 'getPublicationDate',
        'organization' => 'getOrganization',
        'parentScore' => 'getParentScore',
        'instruments' => 'getInstruments',
        'googleDriveFileId' => 'getGoogleDriveFileId',
        'likes' => 'getLikes',
        'comments' => 'getComments',
        'views' => 'getViews'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['sharingKey'] = isset($data['sharingKey']) ? $data['sharingKey'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['privacy'] = isset($data['privacy']) ? $data['privacy'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['htmlUrl'] = isset($data['htmlUrl']) ? $data['htmlUrl'] : null;
        $this->container['subtitle'] = isset($data['subtitle']) ? $data['subtitle'] : null;
        $this->container['lyricist'] = isset($data['lyricist']) ? $data['lyricist'] : null;
        $this->container['composer'] = isset($data['composer']) ? $data['composer'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['creationType'] = isset($data['creationType']) ? $data['creationType'] : null;
        $this->container['license'] = isset($data['license']) ? $data['license'] : null;
        $this->container['licenseText'] = isset($data['licenseText']) ? $data['licenseText'] : null;
        $this->container['durationTime'] = isset($data['durationTime']) ? $data['durationTime'] : null;
        $this->container['numberMeasures'] = isset($data['numberMeasures']) ? $data['numberMeasures'] : null;
        $this->container['mainTempoQpm'] = isset($data['mainTempoQpm']) ? $data['mainTempoQpm'] : null;
        $this->container['rights'] = isset($data['rights']) ? $data['rights'] : null;
        $this->container['collaborators'] = isset($data['collaborators']) ? $data['collaborators'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['modificationDate'] = isset($data['modificationDate']) ? $data['modificationDate'] : null;
        $this->container['publicationDate'] = isset($data['publicationDate']) ? $data['publicationDate'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['parentScore'] = isset($data['parentScore']) ? $data['parentScore'] : null;
        $this->container['instruments'] = isset($data['instruments']) ? $data['instruments'] : null;
        $this->container['googleDriveFileId'] = isset($data['googleDriveFileId']) ? $data['googleDriveFileId'] : null;
        $this->container['likes'] = isset($data['likes']) ? $data['likes'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['views'] = isset($data['views']) ? $data['views'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The unique identifier of the score
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sharingKey
     * @return string
     */
    public function getSharingKey()
    {
        return $this->container['sharingKey'];
    }

    /**
     * Sets sharingKey
     * @param string $sharingKey The private sharing key of the score (available when the `privacy` mode is set to `privateLink`)
     * @return $this
     */
    public function setSharingKey($sharingKey)
    {
        $this->container['sharingKey'] = $sharingKey;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title The title of the score
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets privacy
     * @return \Flat\APIClient\Model\ScorePrivacy
     */
    public function getPrivacy()
    {
        return $this->container['privacy'];
    }

    /**
     * Sets privacy
     * @param \Flat\APIClient\Model\ScorePrivacy $privacy
     * @return $this
     */
    public function setPrivacy($privacy)
    {
        $this->container['privacy'] = $privacy;

        return $this;
    }

    /**
     * Gets user
     * @return \Flat\APIClient\Model\UserPublicSummary
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     * @param \Flat\APIClient\Model\UserPublicSummary $user
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets htmlUrl
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['htmlUrl'];
    }

    /**
     * Sets htmlUrl
     * @param string $htmlUrl The url where the score can be viewed in a web browser
     * @return $this
     */
    public function setHtmlUrl($htmlUrl)
    {
        $this->container['htmlUrl'] = $htmlUrl;

        return $this;
    }

    /**
     * Gets subtitle
     * @return string
     */
    public function getSubtitle()
    {
        return $this->container['subtitle'];
    }

    /**
     * Sets subtitle
     * @param string $subtitle Subtitle of the score
     * @return $this
     */
    public function setSubtitle($subtitle)
    {
        $this->container['subtitle'] = $subtitle;

        return $this;
    }

    /**
     * Gets lyricist
     * @return string
     */
    public function getLyricist()
    {
        return $this->container['lyricist'];
    }

    /**
     * Sets lyricist
     * @param string $lyricist Lyricist of the score
     * @return $this
     */
    public function setLyricist($lyricist)
    {
        $this->container['lyricist'] = $lyricist;

        return $this;
    }

    /**
     * Gets composer
     * @return string
     */
    public function getComposer()
    {
        return $this->container['composer'];
    }

    /**
     * Sets composer
     * @param string $composer Composer of the score
     * @return $this
     */
    public function setComposer($composer)
    {
        $this->container['composer'] = $composer;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Description of the creation
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags Tags describing the score
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets creationType
     * @return \Flat\APIClient\Model\ScoreCreationType
     */
    public function getCreationType()
    {
        return $this->container['creationType'];
    }

    /**
     * Sets creationType
     * @param \Flat\APIClient\Model\ScoreCreationType $creationType
     * @return $this
     */
    public function setCreationType($creationType)
    {
        $this->container['creationType'] = $creationType;

        return $this;
    }

    /**
     * Gets license
     * @return \Flat\APIClient\Model\ScoreLicense
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     * @param \Flat\APIClient\Model\ScoreLicense $license
     * @return $this
     */
    public function setLicense($license)
    {
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets licenseText
     * @return string
     */
    public function getLicenseText()
    {
        return $this->container['licenseText'];
    }

    /**
     * Sets licenseText
     * @param string $licenseText Additional license text written on the exported/printed score
     * @return $this
     */
    public function setLicenseText($licenseText)
    {
        $this->container['licenseText'] = $licenseText;

        return $this;
    }

    /**
     * Gets durationTime
     * @return int
     */
    public function getDurationTime()
    {
        return $this->container['durationTime'];
    }

    /**
     * Sets durationTime
     * @param int $durationTime In seconds, an approximative duration of the score
     * @return $this
     */
    public function setDurationTime($durationTime)
    {
        $this->container['durationTime'] = $durationTime;

        return $this;
    }

    /**
     * Gets numberMeasures
     * @return int
     */
    public function getNumberMeasures()
    {
        return $this->container['numberMeasures'];
    }

    /**
     * Sets numberMeasures
     * @param int $numberMeasures The number of measures in the score
     * @return $this
     */
    public function setNumberMeasures($numberMeasures)
    {
        $this->container['numberMeasures'] = $numberMeasures;

        return $this;
    }

    /**
     * Gets mainTempoQpm
     * @return int
     */
    public function getMainTempoQpm()
    {
        return $this->container['mainTempoQpm'];
    }

    /**
     * Sets mainTempoQpm
     * @param int $mainTempoQpm The main tempo of the score (in QPM)
     * @return $this
     */
    public function setMainTempoQpm($mainTempoQpm)
    {
        $this->container['mainTempoQpm'] = $mainTempoQpm;

        return $this;
    }

    /**
     * Gets rights
     * @return \Flat\APIClient\Model\ScoreRights
     */
    public function getRights()
    {
        return $this->container['rights'];
    }

    /**
     * Sets rights
     * @param \Flat\APIClient\Model\ScoreRights $rights
     * @return $this
     */
    public function setRights($rights)
    {
        $this->container['rights'] = $rights;

        return $this;
    }

    /**
     * Gets collaborators
     * @return \Flat\APIClient\Model\ScoreCollaborator[]
     */
    public function getCollaborators()
    {
        return $this->container['collaborators'];
    }

    /**
     * Sets collaborators
     * @param \Flat\APIClient\Model\ScoreCollaborator[] $collaborators The list of the collaborators of the score
     * @return $this
     */
    public function setCollaborators($collaborators)
    {
        $this->container['collaborators'] = $collaborators;

        return $this;
    }

    /**
     * Gets creationDate
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     * @param \DateTime $creationDate The date when the score was created
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets modificationDate
     * @return \DateTime
     */
    public function getModificationDate()
    {
        return $this->container['modificationDate'];
    }

    /**
     * Sets modificationDate
     * @param \DateTime $modificationDate The date of the last revision of the score
     * @return $this
     */
    public function setModificationDate($modificationDate)
    {
        $this->container['modificationDate'] = $modificationDate;

        return $this;
    }

    /**
     * Gets publicationDate
     * @return \DateTime
     */
    public function getPublicationDate()
    {
        return $this->container['publicationDate'];
    }

    /**
     * Sets publicationDate
     * @param \DateTime $publicationDate The date when the score was published on Flat
     * @return $this
     */
    public function setPublicationDate($publicationDate)
    {
        $this->container['publicationDate'] = $publicationDate;

        return $this;
    }

    /**
     * Gets organization
     * @return string
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     * @param string $organization If the score has been created in an organization, the identifier of this organization. This property is especially used with the score privacy `organizationPublic`.
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets parentScore
     * @return string
     */
    public function getParentScore()
    {
        return $this->container['parentScore'];
    }

    /**
     * Sets parentScore
     * @param string $parentScore If the score has been forked, the unique identifier of the parent score.
     * @return $this
     */
    public function setParentScore($parentScore)
    {
        $this->container['parentScore'] = $parentScore;

        return $this;
    }

    /**
     * Gets instruments
     * @return string[]
     */
    public function getInstruments()
    {
        return $this->container['instruments'];
    }

    /**
     * Sets instruments
     * @param string[] $instruments An array of the instrument identifiers used in the last version of the score. This is mainly used to display a list of the instruments in the Flat's UI or instruments icons. The format of the strings is `{instrument-group}.{instrument-id}`.
     * @return $this
     */
    public function setInstruments($instruments)
    {
        $this->container['instruments'] = $instruments;

        return $this;
    }

    /**
     * Gets googleDriveFileId
     * @return string
     */
    public function getGoogleDriveFileId()
    {
        return $this->container['googleDriveFileId'];
    }

    /**
     * Sets googleDriveFileId
     * @param string $googleDriveFileId If the user uses Google Drive and the score exists on Google Drive, this field will contain the unique identifier of the Flat score on Google Drive. You can access the document using the url: `https://drive.google.com/open?id={googleDriveFileId}`
     * @return $this
     */
    public function setGoogleDriveFileId($googleDriveFileId)
    {
        $this->container['googleDriveFileId'] = $googleDriveFileId;

        return $this;
    }

    /**
     * Gets likes
     * @return \Flat\APIClient\Model\ScoreLikesCounts
     */
    public function getLikes()
    {
        return $this->container['likes'];
    }

    /**
     * Sets likes
     * @param \Flat\APIClient\Model\ScoreLikesCounts $likes
     * @return $this
     */
    public function setLikes($likes)
    {
        $this->container['likes'] = $likes;

        return $this;
    }

    /**
     * Gets comments
     * @return \Flat\APIClient\Model\ScoreCommentsCounts
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     * @param \Flat\APIClient\Model\ScoreCommentsCounts $comments
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets views
     * @return \Flat\APIClient\Model\ScoreViewsCounts
     */
    public function getViews()
    {
        return $this->container['views'];
    }

    /**
     * Sets views
     * @param \Flat\APIClient\Model\ScoreViewsCounts $views
     * @return $this
     */
    public function setViews($views)
    {
        $this->container['views'] = $views;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Flat\APIClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Flat\APIClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


