<?php
/**
 * ClassDetailsClever
 *
 * PHP version 5
 *
 * @category Class
 * @package  Flat\APIClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flat API
 *
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML or MIDI files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and interoduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html)
 *
 * OpenAPI spec version: 2.6.0
 * Contact: developers@flat.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flat\APIClient\Model;

use \ArrayAccess;
use \Flat\APIClient\ObjectSerializer;

/**
 * ClassDetailsClever Class Doc Comment
 *
 * @category Class
 * @description Clever.com section-related information
 * @package  Flat\APIClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClassDetailsClever implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClassDetails_clever';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'creationDate' => '\DateTime',
        'modificationDate' => '\DateTime',
        'subject' => 'string',
        'termName' => 'string',
        'termStartDate' => '\DateTime',
        'termEndDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'creationDate' => 'date-time',
        'modificationDate' => 'date-time',
        'subject' => null,
        'termName' => null,
        'termStartDate' => 'date-time',
        'termEndDate' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'creationDate' => 'creationDate',
        'modificationDate' => 'modificationDate',
        'subject' => 'subject',
        'termName' => 'termName',
        'termStartDate' => 'termStartDate',
        'termEndDate' => 'termEndDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'creationDate' => 'setCreationDate',
        'modificationDate' => 'setModificationDate',
        'subject' => 'setSubject',
        'termName' => 'setTermName',
        'termStartDate' => 'setTermStartDate',
        'termEndDate' => 'setTermEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'creationDate' => 'getCreationDate',
        'modificationDate' => 'getModificationDate',
        'subject' => 'getSubject',
        'termName' => 'getTermName',
        'termStartDate' => 'getTermStartDate',
        'termEndDate' => 'getTermEndDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SUBJECT_ENGLISHLANGUAGE_ARTS = 'english/language arts';
    const SUBJECT_MATH = 'math';
    const SUBJECT_SCIENCE = 'science';
    const SUBJECT_SOCIAL_STUDIES = 'social studies';
    const SUBJECT_LANGUAGE = 'language';
    const SUBJECT_HOMEROOMADVISORY = 'homeroom/advisory';
    const SUBJECT_INTERVENTIONSONLINE_LEARNING = 'interventions/online learning';
    const SUBJECT_TECHNOLOGY_AND_ENGINEERING = 'technology and engineering';
    const SUBJECT_PE_AND_HEALTH = 'PE and health';
    const SUBJECT_ARTS_AND_MUSIC = 'arts and music';
    const SUBJECT_OTHER = 'other';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubjectAllowableValues()
    {
        return [
            self::SUBJECT_ENGLISHLANGUAGE_ARTS,
            self::SUBJECT_MATH,
            self::SUBJECT_SCIENCE,
            self::SUBJECT_SOCIAL_STUDIES,
            self::SUBJECT_LANGUAGE,
            self::SUBJECT_HOMEROOMADVISORY,
            self::SUBJECT_INTERVENTIONSONLINE_LEARNING,
            self::SUBJECT_TECHNOLOGY_AND_ENGINEERING,
            self::SUBJECT_PE_AND_HEALTH,
            self::SUBJECT_ARTS_AND_MUSIC,
            self::SUBJECT_OTHER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['modificationDate'] = isset($data['modificationDate']) ? $data['modificationDate'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['termName'] = isset($data['termName']) ? $data['termName'] : null;
        $this->container['termStartDate'] = isset($data['termStartDate']) ? $data['termStartDate'] : null;
        $this->container['termEndDate'] = isset($data['termEndDate']) ? $data['termEndDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSubjectAllowableValues();
        if (!in_array($this->container['subject'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'subject', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getSubjectAllowableValues();
        if (!in_array($this->container['subject'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Clever section unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime $creationDate The creation date of the section on clever
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets modificationDate
     *
     * @return \DateTime
     */
    public function getModificationDate()
    {
        return $this->container['modificationDate'];
    }

    /**
     * Sets modificationDate
     *
     * @param \DateTime $modificationDate The last modification date of the section on clever
     *
     * @return $this
     */
    public function setModificationDate($modificationDate)
    {
        $this->container['modificationDate'] = $modificationDate;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Normalized subject of the course
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $allowedValues = $this->getSubjectAllowableValues();
        if (!is_null($subject) && !in_array($subject, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'subject', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets termName
     *
     * @return string
     */
    public function getTermName()
    {
        return $this->container['termName'];
    }

    /**
     * Sets termName
     *
     * @param string $termName Name of the term when this course happens
     *
     * @return $this
     */
    public function setTermName($termName)
    {
        $this->container['termName'] = $termName;

        return $this;
    }

    /**
     * Gets termStartDate
     *
     * @return \DateTime
     */
    public function getTermStartDate()
    {
        return $this->container['termStartDate'];
    }

    /**
     * Sets termStartDate
     *
     * @param \DateTime $termStartDate Beginning date of the term
     *
     * @return $this
     */
    public function setTermStartDate($termStartDate)
    {
        $this->container['termStartDate'] = $termStartDate;

        return $this;
    }

    /**
     * Gets termEndDate
     *
     * @return \DateTime
     */
    public function getTermEndDate()
    {
        return $this->container['termEndDate'];
    }

    /**
     * Sets termEndDate
     *
     * @param \DateTime $termEndDate End date of the term
     *
     * @return $this
     */
    public function setTermEndDate($termEndDate)
    {
        $this->container['termEndDate'] = $termEndDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


