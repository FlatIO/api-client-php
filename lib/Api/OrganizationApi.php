<?php
/**
 * OrganizationApi
 * PHP version 5
 *
 * @category Class
 * @package  Flat\APIClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flat API
 *
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML or MIDI files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and interoduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html)
 *
 * OpenAPI spec version: 2.2.0
 * Contact: developers@flat.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flat\APIClient\Api;

use \Flat\APIClient\ApiClient;
use \Flat\APIClient\ApiException;
use \Flat\APIClient\Configuration;
use \Flat\APIClient\ObjectSerializer;

/**
 * OrganizationApi Class Doc Comment
 *
 * @category Class
 * @package  Flat\APIClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationApi
{
    /**
     * API Client
     *
     * @var \Flat\APIClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Flat\APIClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Flat\APIClient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Flat\APIClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Flat\APIClient\ApiClient $apiClient set the API client
     *
     * @return OrganizationApi
     */
    public function setApiClient(\Flat\APIClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createLtiCredentials
     *
     * Create a new couple of LTI 1.x credentials
     *
     * @param \Flat\APIClient\Model\LtiCredentialsCreation $body  (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\LtiCredentials
     */
    public function createLtiCredentials($body)
    {
        list($response) = $this->createLtiCredentialsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLtiCredentialsWithHttpInfo
     *
     * Create a new couple of LTI 1.x credentials
     *
     * @param \Flat\APIClient\Model\LtiCredentialsCreation $body  (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\LtiCredentials, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLtiCredentialsWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createLtiCredentials');
        }
        // parse inputs
        $resourcePath = "/organizations/lti/credentials";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\LtiCredentials',
                '/organizations/lti/credentials'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\LtiCredentials', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\LtiCredentials', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createOrganizationInvitation
     *
     * Create a new invitation to join the organization
     *
     * @param \Flat\APIClient\Model\OrganizationInvitationCreation $body  (optional)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\OrganizationInvitation
     */
    public function createOrganizationInvitation($body = null)
    {
        list($response) = $this->createOrganizationInvitationWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createOrganizationInvitationWithHttpInfo
     *
     * Create a new invitation to join the organization
     *
     * @param \Flat\APIClient\Model\OrganizationInvitationCreation $body  (optional)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\OrganizationInvitation, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationInvitationWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/organizations/invitations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\OrganizationInvitation',
                '/organizations/invitations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\OrganizationInvitation', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\OrganizationInvitation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createOrganizationUser
     *
     * Create a new user account
     *
     * @param \Flat\APIClient\Model\UserCreation $body  (optional)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\UserDetailsAdmin
     */
    public function createOrganizationUser($body = null)
    {
        list($response) = $this->createOrganizationUserWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createOrganizationUserWithHttpInfo
     *
     * Create a new user account
     *
     * @param \Flat\APIClient\Model\UserCreation $body  (optional)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\UserDetailsAdmin, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationUserWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/organizations/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\UserDetailsAdmin',
                '/organizations/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\UserDetailsAdmin', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\UserDetailsAdmin', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listLtiCredentials
     *
     * List LTI 1.x credentials
     *
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\LtiCredentials[]
     */
    public function listLtiCredentials()
    {
        list($response) = $this->listLtiCredentialsWithHttpInfo();
        return $response;
    }

    /**
     * Operation listLtiCredentialsWithHttpInfo
     *
     * List LTI 1.x credentials
     *
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\LtiCredentials[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listLtiCredentialsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/organizations/lti/credentials";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\LtiCredentials[]',
                '/organizations/lti/credentials'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\LtiCredentials[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\LtiCredentials[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listOrganizationInvitations
     *
     * List the organization invitations
     *
     * @param string $role Filter users by role (optional)
     * @param int $limit This is the maximum number of objects that may be returned (optional, default to 100)
     * @param int $offset This offsets the start of each page by the number specified (optional, default to 0)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\OrganizationInvitation[]
     */
    public function listOrganizationInvitations($role = null, $limit = '100', $offset = '0')
    {
        list($response) = $this->listOrganizationInvitationsWithHttpInfo($role, $limit, $offset);
        return $response;
    }

    /**
     * Operation listOrganizationInvitationsWithHttpInfo
     *
     * List the organization invitations
     *
     * @param string $role Filter users by role (optional)
     * @param int $limit This is the maximum number of objects that may be returned (optional, default to 100)
     * @param int $offset This offsets the start of each page by the number specified (optional, default to 0)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\OrganizationInvitation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listOrganizationInvitationsWithHttpInfo($role = null, $limit = '100', $offset = '0')
    {
        if (!is_null($limit) && ($limit > 1000)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrganizationApi.listOrganizationInvitations, must be smaller than or equal to 1000.');
        }
        if (!is_null($limit) && ($limit < 1)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrganizationApi.listOrganizationInvitations, must be bigger than or equal to 1.');
        }

        if (!is_null($offset) && ($offset < 0)) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling OrganizationApi.listOrganizationInvitations, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/organizations/invitations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($role !== null) {
            $queryParams['role'] = $this->apiClient->getSerializer()->toQueryValue($role);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\OrganizationInvitation[]',
                '/organizations/invitations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\OrganizationInvitation[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\OrganizationInvitation[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listOrganizationUsers
     *
     * List the organization users
     *
     * @param string $role Filter users by role (optional)
     * @param int $limit This is the maximum number of objects that may be returned (optional, default to 100)
     * @param int $offset This offsets the start of each page by the number specified (optional, default to 0)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\UserDetailsAdmin[]
     */
    public function listOrganizationUsers($role = null, $limit = '100', $offset = '0')
    {
        list($response) = $this->listOrganizationUsersWithHttpInfo($role, $limit, $offset);
        return $response;
    }

    /**
     * Operation listOrganizationUsersWithHttpInfo
     *
     * List the organization users
     *
     * @param string $role Filter users by role (optional)
     * @param int $limit This is the maximum number of objects that may be returned (optional, default to 100)
     * @param int $offset This offsets the start of each page by the number specified (optional, default to 0)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\UserDetailsAdmin[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listOrganizationUsersWithHttpInfo($role = null, $limit = '100', $offset = '0')
    {
        if (!is_null($limit) && ($limit > 1000)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrganizationApi.listOrganizationUsers, must be smaller than or equal to 1000.');
        }
        if (!is_null($limit) && ($limit < 1)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrganizationApi.listOrganizationUsers, must be bigger than or equal to 1.');
        }

        if (!is_null($offset) && ($offset < 0)) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling OrganizationApi.listOrganizationUsers, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/organizations/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($role !== null) {
            $queryParams['role'] = $this->apiClient->getSerializer()->toQueryValue($role);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\UserDetailsAdmin[]',
                '/organizations/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\UserDetailsAdmin[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\UserDetailsAdmin[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeOrganizationInvitation
     *
     * Remove an organization invitation
     *
     * @param string $invitation Unique identifier of the invitation (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return void
     */
    public function removeOrganizationInvitation($invitation)
    {
        list($response) = $this->removeOrganizationInvitationWithHttpInfo($invitation);
        return $response;
    }

    /**
     * Operation removeOrganizationInvitationWithHttpInfo
     *
     * Remove an organization invitation
     *
     * @param string $invitation Unique identifier of the invitation (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeOrganizationInvitationWithHttpInfo($invitation)
    {
        // verify the required parameter 'invitation' is set
        if ($invitation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitation when calling removeOrganizationInvitation');
        }
        // parse inputs
        $resourcePath = "/organizations/invitations/{invitation}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($invitation !== null) {
            $resourcePath = str_replace(
                "{" . "invitation" . "}",
                $this->apiClient->getSerializer()->toPathValue($invitation),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/organizations/invitations/{invitation}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation revokeLtiCredentials
     *
     * Revoke LTI 1.x credentials
     *
     * @param string $credentials Credentials unique identifier (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return void
     */
    public function revokeLtiCredentials($credentials)
    {
        list($response) = $this->revokeLtiCredentialsWithHttpInfo($credentials);
        return $response;
    }

    /**
     * Operation revokeLtiCredentialsWithHttpInfo
     *
     * Revoke LTI 1.x credentials
     *
     * @param string $credentials Credentials unique identifier (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeLtiCredentialsWithHttpInfo($credentials)
    {
        // verify the required parameter 'credentials' is set
        if ($credentials === null) {
            throw new \InvalidArgumentException('Missing the required parameter $credentials when calling revokeLtiCredentials');
        }
        // parse inputs
        $resourcePath = "/organizations/lti/credentials/{credentials}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($credentials !== null) {
            $resourcePath = str_replace(
                "{" . "credentials" . "}",
                $this->apiClient->getSerializer()->toPathValue($credentials),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/organizations/lti/credentials/{credentials}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
