<?php
/**
 * GroupApi
 * PHP version 5
 *
 * @category Class
 * @package  Flat\APIClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flat API
 *
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML or MIDI files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and interoduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html)
 *
 * OpenAPI spec version: 2.4.0
 * Contact: developers@flat.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flat\APIClient\Api;

use \Flat\APIClient\ApiClient;
use \Flat\APIClient\ApiException;
use \Flat\APIClient\Configuration;
use \Flat\APIClient\ObjectSerializer;

/**
 * GroupApi Class Doc Comment
 *
 * @category Class
 * @package  Flat\APIClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupApi
{
    /**
     * API Client
     *
     * @var \Flat\APIClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Flat\APIClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Flat\APIClient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Flat\APIClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Flat\APIClient\ApiClient $apiClient set the API client
     *
     * @return GroupApi
     */
    public function setApiClient(\Flat\APIClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getGroupDetails
     *
     * Get group information
     *
     * @param string $group Unique identifier of a Flat group (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\GroupDetails
     */
    public function getGroupDetails($group)
    {
        list($response) = $this->getGroupDetailsWithHttpInfo($group);
        return $response;
    }

    /**
     * Operation getGroupDetailsWithHttpInfo
     *
     * Get group information
     *
     * @param string $group Unique identifier of a Flat group (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\GroupDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupDetailsWithHttpInfo($group)
    {
        // verify the required parameter 'group' is set
        if ($group === null) {
            throw new \InvalidArgumentException('Missing the required parameter $group when calling getGroupDetails');
        }
        // parse inputs
        $resourcePath = "/groups/{group}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($group !== null) {
            $resourcePath = str_replace(
                "{" . "group" . "}",
                $this->apiClient->getSerializer()->toPathValue($group),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\GroupDetails',
                '/groups/{group}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\GroupDetails', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\GroupDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getGroupScores
     *
     * List group's scores
     *
     * @param string $group Unique identifier of a Flat group (required)
     * @param string $parent Filter the score forked from the score id &#x60;parent&#x60; (optional)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\ScoreDetails[]
     */
    public function getGroupScores($group, $parent = null)
    {
        list($response) = $this->getGroupScoresWithHttpInfo($group, $parent);
        return $response;
    }

    /**
     * Operation getGroupScoresWithHttpInfo
     *
     * List group's scores
     *
     * @param string $group Unique identifier of a Flat group (required)
     * @param string $parent Filter the score forked from the score id &#x60;parent&#x60; (optional)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\ScoreDetails[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupScoresWithHttpInfo($group, $parent = null)
    {
        // verify the required parameter 'group' is set
        if ($group === null) {
            throw new \InvalidArgumentException('Missing the required parameter $group when calling getGroupScores');
        }
        // parse inputs
        $resourcePath = "/groups/{group}/scores";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($parent !== null) {
            $queryParams['parent'] = $this->apiClient->getSerializer()->toQueryValue($parent);
        }
        // path params
        if ($group !== null) {
            $resourcePath = str_replace(
                "{" . "group" . "}",
                $this->apiClient->getSerializer()->toPathValue($group),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\ScoreDetails[]',
                '/groups/{group}/scores'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\ScoreDetails[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\ScoreDetails[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listGroupUsers
     *
     * List group's users
     *
     * @param string $group Unique identifier of a Flat group (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\UserPublic[]
     */
    public function listGroupUsers($group)
    {
        list($response) = $this->listGroupUsersWithHttpInfo($group);
        return $response;
    }

    /**
     * Operation listGroupUsersWithHttpInfo
     *
     * List group's users
     *
     * @param string $group Unique identifier of a Flat group (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\UserPublic[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listGroupUsersWithHttpInfo($group)
    {
        // verify the required parameter 'group' is set
        if ($group === null) {
            throw new \InvalidArgumentException('Missing the required parameter $group when calling listGroupUsers');
        }
        // parse inputs
        $resourcePath = "/groups/{group}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($group !== null) {
            $resourcePath = str_replace(
                "{" . "group" . "}",
                $this->apiClient->getSerializer()->toPathValue($group),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\UserPublic[]',
                '/groups/{group}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\UserPublic[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\UserPublic[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
