<?php
/**
 * ClassApi
 * PHP version 5
 *
 * @category Class
 * @package  Flat\APIClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flat API
 *
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML or MIDI files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and interoduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html)
 *
 * OpenAPI spec version: 2.4.0
 * Contact: developers@flat.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Flat\APIClient\Api;

use \Flat\APIClient\ApiClient;
use \Flat\APIClient\ApiException;
use \Flat\APIClient\Configuration;
use \Flat\APIClient\ObjectSerializer;

/**
 * ClassApi Class Doc Comment
 *
 * @category Class
 * @package  Flat\APIClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClassApi
{
    /**
     * API Client
     *
     * @var \Flat\APIClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Flat\APIClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Flat\APIClient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Flat\APIClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Flat\APIClient\ApiClient $apiClient set the API client
     *
     * @return ClassApi
     */
    public function setApiClient(\Flat\APIClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation activateClass
     *
     * Activate the class
     *
     * @param string $class Unique identifier of the class (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\ClassDetails
     */
    public function activateClass($class)
    {
        list($response) = $this->activateClassWithHttpInfo($class);
        return $response;
    }

    /**
     * Operation activateClassWithHttpInfo
     *
     * Activate the class
     *
     * @param string $class Unique identifier of the class (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\ClassDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function activateClassWithHttpInfo($class)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling activateClass');
        }
        // parse inputs
        $resourcePath = "/classes/{class}/activate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\ClassDetails',
                '/classes/{class}/activate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\ClassDetails', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\ClassDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addClassUser
     *
     * Add a user to the class
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $user Unique identifier of the user (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return void
     */
    public function addClassUser($class, $user)
    {
        list($response) = $this->addClassUserWithHttpInfo($class, $user);
        return $response;
    }

    /**
     * Operation addClassUserWithHttpInfo
     *
     * Add a user to the class
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $user Unique identifier of the user (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addClassUserWithHttpInfo($class, $user)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling addClassUser');
        }
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling addClassUser');
        }
        // parse inputs
        $resourcePath = "/classes/{class}/users/{user}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }
        // path params
        if ($user !== null) {
            $resourcePath = str_replace(
                "{" . "user" . "}",
                $this->apiClient->getSerializer()->toPathValue($user),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/classes/{class}/users/{user}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation archiveClass
     *
     * Archive the class
     *
     * @param string $class Unique identifier of the class (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\ClassDetails
     */
    public function archiveClass($class)
    {
        list($response) = $this->archiveClassWithHttpInfo($class);
        return $response;
    }

    /**
     * Operation archiveClassWithHttpInfo
     *
     * Archive the class
     *
     * @param string $class Unique identifier of the class (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\ClassDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveClassWithHttpInfo($class)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling archiveClass');
        }
        // parse inputs
        $resourcePath = "/classes/{class}/archive";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\ClassDetails',
                '/classes/{class}/archive'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\ClassDetails', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\ClassDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation copyAssignment
     *
     * Copy an assignment
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $assignment Unique identifier of the assignment (required)
     * @param \Flat\APIClient\Model\AssignmentCopy $body  (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\Assignment
     */
    public function copyAssignment($class, $assignment, $body)
    {
        list($response) = $this->copyAssignmentWithHttpInfo($class, $assignment, $body);
        return $response;
    }

    /**
     * Operation copyAssignmentWithHttpInfo
     *
     * Copy an assignment
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $assignment Unique identifier of the assignment (required)
     * @param \Flat\APIClient\Model\AssignmentCopy $body  (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\Assignment, HTTP status code, HTTP response headers (array of strings)
     */
    public function copyAssignmentWithHttpInfo($class, $assignment, $body)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling copyAssignment');
        }
        // verify the required parameter 'assignment' is set
        if ($assignment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assignment when calling copyAssignment');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling copyAssignment');
        }
        // parse inputs
        $resourcePath = "/classes/{class}/assignments/{assignment}/copy";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }
        // path params
        if ($assignment !== null) {
            $resourcePath = str_replace(
                "{" . "assignment" . "}",
                $this->apiClient->getSerializer()->toPathValue($assignment),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\Assignment',
                '/classes/{class}/assignments/{assignment}/copy'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\Assignment', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\Assignment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAssignment
     *
     * Assignment creation
     *
     * @param string $class Unique identifier of the class (required)
     * @param \Flat\APIClient\Model\AssignmentCreation $body  (optional)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\Assignment
     */
    public function createAssignment($class, $body = null)
    {
        list($response) = $this->createAssignmentWithHttpInfo($class, $body);
        return $response;
    }

    /**
     * Operation createAssignmentWithHttpInfo
     *
     * Assignment creation
     *
     * @param string $class Unique identifier of the class (required)
     * @param \Flat\APIClient\Model\AssignmentCreation $body  (optional)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\Assignment, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssignmentWithHttpInfo($class, $body = null)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling createAssignment');
        }
        // parse inputs
        $resourcePath = "/classes/{class}/assignments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\Assignment',
                '/classes/{class}/assignments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\Assignment', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\Assignment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createClass
     *
     * Create a new class
     *
     * @param \Flat\APIClient\Model\ClassCreation $body  (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\ClassDetails
     */
    public function createClass($body)
    {
        list($response) = $this->createClassWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createClassWithHttpInfo
     *
     * Create a new class
     *
     * @param \Flat\APIClient\Model\ClassCreation $body  (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\ClassDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function createClassWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createClass');
        }
        // parse inputs
        $resourcePath = "/classes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\ClassDetails',
                '/classes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\ClassDetails', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\ClassDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createSubmission
     *
     * Create or edit a submission
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $assignment Unique identifier of the assignment (required)
     * @param \Flat\APIClient\Model\AssignmentSubmissionUpdate $body  (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\AssignmentSubmission
     */
    public function createSubmission($class, $assignment, $body)
    {
        list($response) = $this->createSubmissionWithHttpInfo($class, $assignment, $body);
        return $response;
    }

    /**
     * Operation createSubmissionWithHttpInfo
     *
     * Create or edit a submission
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $assignment Unique identifier of the assignment (required)
     * @param \Flat\APIClient\Model\AssignmentSubmissionUpdate $body  (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\AssignmentSubmission, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubmissionWithHttpInfo($class, $assignment, $body)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling createSubmission');
        }
        // verify the required parameter 'assignment' is set
        if ($assignment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assignment when calling createSubmission');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createSubmission');
        }
        // parse inputs
        $resourcePath = "/classes/{class}/assignments/{assignment}/submissions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }
        // path params
        if ($assignment !== null) {
            $resourcePath = str_replace(
                "{" . "assignment" . "}",
                $this->apiClient->getSerializer()->toPathValue($assignment),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\AssignmentSubmission',
                '/classes/{class}/assignments/{assignment}/submissions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\AssignmentSubmission', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\AssignmentSubmission', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteClassUser
     *
     * Remove a user from the class
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $user Unique identifier of the user (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return void
     */
    public function deleteClassUser($class, $user)
    {
        list($response) = $this->deleteClassUserWithHttpInfo($class, $user);
        return $response;
    }

    /**
     * Operation deleteClassUserWithHttpInfo
     *
     * Remove a user from the class
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $user Unique identifier of the user (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteClassUserWithHttpInfo($class, $user)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling deleteClassUser');
        }
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling deleteClassUser');
        }
        // parse inputs
        $resourcePath = "/classes/{class}/users/{user}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }
        // path params
        if ($user !== null) {
            $resourcePath = str_replace(
                "{" . "user" . "}",
                $this->apiClient->getSerializer()->toPathValue($user),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/classes/{class}/users/{user}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation editSubmission
     *
     * Edit a submission
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $assignment Unique identifier of the assignment (required)
     * @param string $submission Unique identifier of the submission (required)
     * @param \Flat\APIClient\Model\AssignmentSubmissionUpdate $body  (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\AssignmentSubmission
     */
    public function editSubmission($class, $assignment, $submission, $body)
    {
        list($response) = $this->editSubmissionWithHttpInfo($class, $assignment, $submission, $body);
        return $response;
    }

    /**
     * Operation editSubmissionWithHttpInfo
     *
     * Edit a submission
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $assignment Unique identifier of the assignment (required)
     * @param string $submission Unique identifier of the submission (required)
     * @param \Flat\APIClient\Model\AssignmentSubmissionUpdate $body  (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\AssignmentSubmission, HTTP status code, HTTP response headers (array of strings)
     */
    public function editSubmissionWithHttpInfo($class, $assignment, $submission, $body)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling editSubmission');
        }
        // verify the required parameter 'assignment' is set
        if ($assignment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assignment when calling editSubmission');
        }
        // verify the required parameter 'submission' is set
        if ($submission === null) {
            throw new \InvalidArgumentException('Missing the required parameter $submission when calling editSubmission');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling editSubmission');
        }
        // parse inputs
        $resourcePath = "/classes/{class}/assignments/{assignment}/submissions/{submission}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }
        // path params
        if ($assignment !== null) {
            $resourcePath = str_replace(
                "{" . "assignment" . "}",
                $this->apiClient->getSerializer()->toPathValue($assignment),
                $resourcePath
            );
        }
        // path params
        if ($submission !== null) {
            $resourcePath = str_replace(
                "{" . "submission" . "}",
                $this->apiClient->getSerializer()->toPathValue($submission),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\AssignmentSubmission',
                '/classes/{class}/assignments/{assignment}/submissions/{submission}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\AssignmentSubmission', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\AssignmentSubmission', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation enrollClass
     *
     * Join a class
     *
     * @param string $enrollmentCode The enrollment code, available to the teacher in &#x60;ClassDetails&#x60; (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\ClassDetails
     */
    public function enrollClass($enrollmentCode)
    {
        list($response) = $this->enrollClassWithHttpInfo($enrollmentCode);
        return $response;
    }

    /**
     * Operation enrollClassWithHttpInfo
     *
     * Join a class
     *
     * @param string $enrollmentCode The enrollment code, available to the teacher in &#x60;ClassDetails&#x60; (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\ClassDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function enrollClassWithHttpInfo($enrollmentCode)
    {
        // verify the required parameter 'enrollmentCode' is set
        if ($enrollmentCode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $enrollmentCode when calling enrollClass');
        }
        // parse inputs
        $resourcePath = "/classes/enroll/{enrollmentCode}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($enrollmentCode !== null) {
            $resourcePath = str_replace(
                "{" . "enrollmentCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($enrollmentCode),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\ClassDetails',
                '/classes/enroll/{enrollmentCode}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\ClassDetails', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\ClassDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getClass
     *
     * Get the details of a single class
     *
     * @param string $class Unique identifier of the class (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\ClassDetails
     */
    public function getClass($class)
    {
        list($response) = $this->getClassWithHttpInfo($class);
        return $response;
    }

    /**
     * Operation getClassWithHttpInfo
     *
     * Get the details of a single class
     *
     * @param string $class Unique identifier of the class (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\ClassDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClassWithHttpInfo($class)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling getClass');
        }
        // parse inputs
        $resourcePath = "/classes/{class}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\ClassDetails',
                '/classes/{class}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\ClassDetails', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\ClassDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getScoreSubmissions
     *
     * List submissions related to the score
     *
     * @param string $score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;). (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\AssignmentSubmission[]
     */
    public function getScoreSubmissions($score)
    {
        list($response) = $this->getScoreSubmissionsWithHttpInfo($score);
        return $response;
    }

    /**
     * Operation getScoreSubmissionsWithHttpInfo
     *
     * List submissions related to the score
     *
     * @param string $score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;). (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\AssignmentSubmission[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getScoreSubmissionsWithHttpInfo($score)
    {
        // verify the required parameter 'score' is set
        if ($score === null) {
            throw new \InvalidArgumentException('Missing the required parameter $score when calling getScoreSubmissions');
        }
        // parse inputs
        $resourcePath = "/scores/{score}/submissions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($score !== null) {
            $resourcePath = str_replace(
                "{" . "score" . "}",
                $this->apiClient->getSerializer()->toPathValue($score),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\AssignmentSubmission[]',
                '/scores/{score}/submissions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\AssignmentSubmission[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\AssignmentSubmission[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSubmission
     *
     * Get a student submission
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $assignment Unique identifier of the assignment (required)
     * @param string $submission Unique identifier of the submission (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\AssignmentSubmission
     */
    public function getSubmission($class, $assignment, $submission)
    {
        list($response) = $this->getSubmissionWithHttpInfo($class, $assignment, $submission);
        return $response;
    }

    /**
     * Operation getSubmissionWithHttpInfo
     *
     * Get a student submission
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $assignment Unique identifier of the assignment (required)
     * @param string $submission Unique identifier of the submission (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\AssignmentSubmission, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubmissionWithHttpInfo($class, $assignment, $submission)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling getSubmission');
        }
        // verify the required parameter 'assignment' is set
        if ($assignment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assignment when calling getSubmission');
        }
        // verify the required parameter 'submission' is set
        if ($submission === null) {
            throw new \InvalidArgumentException('Missing the required parameter $submission when calling getSubmission');
        }
        // parse inputs
        $resourcePath = "/classes/{class}/assignments/{assignment}/submissions/{submission}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }
        // path params
        if ($assignment !== null) {
            $resourcePath = str_replace(
                "{" . "assignment" . "}",
                $this->apiClient->getSerializer()->toPathValue($assignment),
                $resourcePath
            );
        }
        // path params
        if ($submission !== null) {
            $resourcePath = str_replace(
                "{" . "submission" . "}",
                $this->apiClient->getSerializer()->toPathValue($submission),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\AssignmentSubmission',
                '/classes/{class}/assignments/{assignment}/submissions/{submission}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\AssignmentSubmission', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\AssignmentSubmission', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSubmissions
     *
     * List the students' submissions
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $assignment Unique identifier of the assignment (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\AssignmentSubmission[]
     */
    public function getSubmissions($class, $assignment)
    {
        list($response) = $this->getSubmissionsWithHttpInfo($class, $assignment);
        return $response;
    }

    /**
     * Operation getSubmissionsWithHttpInfo
     *
     * List the students' submissions
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $assignment Unique identifier of the assignment (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\AssignmentSubmission[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubmissionsWithHttpInfo($class, $assignment)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling getSubmissions');
        }
        // verify the required parameter 'assignment' is set
        if ($assignment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assignment when calling getSubmissions');
        }
        // parse inputs
        $resourcePath = "/classes/{class}/assignments/{assignment}/submissions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }
        // path params
        if ($assignment !== null) {
            $resourcePath = str_replace(
                "{" . "assignment" . "}",
                $this->apiClient->getSerializer()->toPathValue($assignment),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\AssignmentSubmission[]',
                '/classes/{class}/assignments/{assignment}/submissions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\AssignmentSubmission[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\AssignmentSubmission[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listAssignments
     *
     * Assignments listing
     *
     * @param string $class Unique identifier of the class (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\Assignment[]
     */
    public function listAssignments($class)
    {
        list($response) = $this->listAssignmentsWithHttpInfo($class);
        return $response;
    }

    /**
     * Operation listAssignmentsWithHttpInfo
     *
     * Assignments listing
     *
     * @param string $class Unique identifier of the class (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\Assignment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listAssignmentsWithHttpInfo($class)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling listAssignments');
        }
        // parse inputs
        $resourcePath = "/classes/{class}/assignments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\Assignment[]',
                '/classes/{class}/assignments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\Assignment[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\Assignment[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listClassStudentSubmissions
     *
     * List the submissions for a student
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $user Unique identifier of the user (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\AssignmentSubmission[]
     */
    public function listClassStudentSubmissions($class, $user)
    {
        list($response) = $this->listClassStudentSubmissionsWithHttpInfo($class, $user);
        return $response;
    }

    /**
     * Operation listClassStudentSubmissionsWithHttpInfo
     *
     * List the submissions for a student
     *
     * @param string $class Unique identifier of the class (required)
     * @param string $user Unique identifier of the user (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\AssignmentSubmission[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listClassStudentSubmissionsWithHttpInfo($class, $user)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling listClassStudentSubmissions');
        }
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling listClassStudentSubmissions');
        }
        // parse inputs
        $resourcePath = "/classes/{class}/students/{user}/submissions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }
        // path params
        if ($user !== null) {
            $resourcePath = str_replace(
                "{" . "user" . "}",
                $this->apiClient->getSerializer()->toPathValue($user),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\AssignmentSubmission[]',
                '/classes/{class}/students/{user}/submissions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\AssignmentSubmission[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\AssignmentSubmission[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listClasses
     *
     * List the classes available for the current user
     *
     * @param string $state Filter the classes by state (optional, default to active)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\ClassDetails[]
     */
    public function listClasses($state = 'active')
    {
        list($response) = $this->listClassesWithHttpInfo($state);
        return $response;
    }

    /**
     * Operation listClassesWithHttpInfo
     *
     * List the classes available for the current user
     *
     * @param string $state Filter the classes by state (optional, default to active)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\ClassDetails[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listClassesWithHttpInfo($state = 'active')
    {
        // parse inputs
        $resourcePath = "/classes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\ClassDetails[]',
                '/classes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\ClassDetails[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\ClassDetails[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation unarchiveClass
     *
     * Unarchive the class
     *
     * @param string $class Unique identifier of the class (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\ClassDetails
     */
    public function unarchiveClass($class)
    {
        list($response) = $this->unarchiveClassWithHttpInfo($class);
        return $response;
    }

    /**
     * Operation unarchiveClassWithHttpInfo
     *
     * Unarchive the class
     *
     * @param string $class Unique identifier of the class (required)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\ClassDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function unarchiveClassWithHttpInfo($class)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling unarchiveClass');
        }
        // parse inputs
        $resourcePath = "/classes/{class}/archive";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\ClassDetails',
                '/classes/{class}/archive'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\ClassDetails', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\ClassDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateClass
     *
     * Update the class
     *
     * @param string $class Unique identifier of the class (required)
     * @param \Flat\APIClient\Model\ClassUpdate $body Details of the Class (optional)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return \Flat\APIClient\Model\ClassDetails
     */
    public function updateClass($class, $body = null)
    {
        list($response) = $this->updateClassWithHttpInfo($class, $body);
        return $response;
    }

    /**
     * Operation updateClassWithHttpInfo
     *
     * Update the class
     *
     * @param string $class Unique identifier of the class (required)
     * @param \Flat\APIClient\Model\ClassUpdate $body Details of the Class (optional)
     * @throws \Flat\APIClient\ApiException on non-2xx response
     * @return array of \Flat\APIClient\Model\ClassDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateClassWithHttpInfo($class, $body = null)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling updateClass');
        }
        // parse inputs
        $resourcePath = "/classes/{class}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Flat\APIClient\Model\ClassDetails',
                '/classes/{class}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Flat\APIClient\Model\ClassDetails', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\ClassDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Flat\APIClient\Model\FlatErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
